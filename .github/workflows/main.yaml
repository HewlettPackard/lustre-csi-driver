name: Docker build and push

on:
  push:
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  # TEST_TARGET: Name of the testing target in the Dockerfile
  TEST_TARGET: testing

  # DO_TEST - true to build and run unit tests, false to skip the tests
  # The docker test current fails on this project
  DO_TEST: false

  # DO_PUSH - true to push to the HPE_DEPLOY_REPO, false to not push
  DO_PUSH: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: "Check git dir"
      run: |
        ls -ld .git/
        git log -20
        echo "XXXXXXXXXXXXXXXXXXXXXXX"
        git tag -l
        echo "XXXXXXXXXXXXXXXXXXXXXXX"
        git show v0.0.1
        echo "XXXXXXXXXXXXXXXXXXXXXXX"
        git describe

#    - name: "Repair tag"
#      run: git fetch -f origin ${{ github.ref }}:${{ github.ref }}

#    - name: "Verify tag is annotated"
#      run: |
#        echo "XXXXXXXXXXXXXXXXXXXXXXX"
#        echo "GITHUB_REF=${{ github.ref }}"
#        if test x$(git for-each-ref ${{ github.ref }} | awk '{print $2}') = xtag; then /bin/true; else echo "\"${{ github.ref }}\" does not look like an annotated tag!"; /bin/false; fi

    - name: Lowercase repository name for docker build
      id: lowercase-repository-name
      run: |
        echo "HPE_BUILD_REPO=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        echo "HPE_DEPLOY_REPO=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: set TAG & TESTTAG for main/master
      run: |
        echo "TAG=$(./git-version-gen)" >> ${GITHUB_ENV}
        echo "LATESTTAG=latest" >> ${GITHUB_ENV}
        echo "SHA_TAG=${{ github.sha }}" >> ${GITHUB_ENV}
        echo "${GITHUB_ENV} File:"
        cat ${GITHUB_ENV}
      shell: bash

    - name: Docker login
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build the test Docker image
      if: ${{ env.DO_TEST == 'true' }}
      id: docker_build_test_target
      uses: docker/build-push-action@v2
      with:
        push: false
        target: ${{ env.TEST_TARGET }}
        tags: ${{ env.HPE_BUILD_REPO }}:${{ env.TESTTAG }}

    - name: Run the Docker image unit tests
      if: ${{ env.DO_TEST == 'true' }}
      run: docker run ${HPE_BUILD_REPO}:${TESTTAG}

    - name: Build the final Docker image
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: false
        tags: ${{ env.HPE_BUILD_REPO }}:${{ env.TAG }}

    - name: Tag the build
      run: docker tag docker.io/${HPE_BUILD_REPO}:${TAG} ghcr.io/${HPE_DEPLOY_REPO}:${TAG}

    - name: Tag the build as latest
      run: docker tag ${HPE_BUILD_REPO}:${TAG} ghcr.io/${HPE_DEPLOY_REPO}:${LATESTTAG}

    - name: Tag the build using git SHA
      run: docker tag ${HPE_BUILD_REPO}:${TAG} ghcr.io/${HPE_DEPLOY_REPO}:${SHA_TAG}

    - name: Push the tagged build
      if: ${{ env.DO_PUSH == 'true' }}
      run: docker push ghcr.io/${HPE_DEPLOY_REPO}:${TAG}

    - name: Push the build tagged as latest
      if: ${{ env.DO_PUSH == 'true' }}
      run: docker push ghcr.io/${HPE_DEPLOY_REPO}:${LATESTTAG}

    - name: Push the build tagged with git SHA
      if: ${{ env.DO_PUSH == 'true' }}
      run: docker push ghcr.io/${HPE_DEPLOY_REPO}:${SHA_TAG}
